---
title: Problem set 4
date: 2025-10-05
---

In the next problem set, we plan to explore the relationship between COVID-19 death rates and vaccination rates across US states by visually examining their correlation. This analysis will involve gathering COVID-19 related data from the CDC's API and then extensively processing it to merge the various datasets. Since the population sizes of states vary significantly, we will focus on comparing rates rather than absolute numbers. To facilitate this, we will also source population data from the US Census to accurately calculate these rates. 

In this problem set we will learn how to extract and wrangle data from the data US Census and CDC APIs.

1. Get an API key from the US Census at <https://api.census.gov/data/key_signup.html>. You can't share this public key. But your code has to run on a TFs computer. Assume the TF will have a file in their working directory named `census-key.R` with the following one line of code:

```
census_key <- "A_CENSUS_KEY_THAT_WORKS"
```

Write a first line of code for your problem set that defines `census_key` by running the code in the file `census-key.R`.

```{r}
# reads and executes the code in the census-key.R file
# my census-key.R file is in .gitignore, so it doesn't get pushed to GitHub
source("census-key.R")
```

2. The [US Census API User Guide](https://www.census.gov/content/dam/Census/data/developers/api-user-guide/api-user-guide.pdf)
provides details on how to leverage this valuable resource. We are interested in vintage population estimates for years 2021 and 2022. From the documentation we find that the _endpoint_ is:


```{r}
url <- "https://api.census.gov/data/2021/pep/population"
```

Use the **httr2** package to construct the following GET request.

```
https://api.census.gov/data/2021/pep/population?get=POP_2020,POP_2021,NAME&for=state:*&key=YOURKEYHERE
```

Create an object called `request` of class `httr2_request` with this URL as an endpoint.
Hint: Print out `request` to check that the URL matches what we want.

```{r}
#| message: false
#| warning: false
library(httr2)

# to create a request with this URL as an endpoint, we need to take the part before "YOURKEYHERE" and paste it together with census_key
request <- request(paste0("https://api.census.gov/data/2021/pep/population?get=POP_2020,POP_2021,NAME&for=state:*&key=",census_key))
```

3. Make a request to the US Census API using the `request` object. Save the response to and object named `response`. Check the response status of your request and make sure it was successful. You can learn about _status codes_ [here](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes).


```{r}
# req_perform actually sends the request 
response <- request |> req_perform()
```

4. Use a function from the **httr2** package to determine the content type of your response.

```{r}
# both these functions seem to work
resp_headers(response)[["Content-Type"]]
resp_content_type(response)
```

5. Use just one line of code and one function to extract the data into a matrix. 
Hints: 1) Use the `resp_body_json` function. 2) The first row of the matrix will be the variable names and this OK as we will fix in the next exercise.

```{r}
population <- resp_body_json(response,simplifyVector = TRUE)

# note that without simplifyVector we would be dealing with population[[x]][y] instead of population[x,y]
```

6. Examine the `population` matrix you just created. Notice that 1) it is not tidy, 2) the column types are not what we want, and 3) the first row is a header. Convert `population` to a tidy dataset. Remove the state ID column and change the name of the column with state names to `state_name`. Add a column with state abbreviations called `state`. Make sure you assign the abbreviations for DC and PR correctly. Hint: Use the **janitor** package to make the first row the header. 

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(janitor)

population <- population |> row_to_names(row_number = 1) |> # converts first row into headers
  as.tibble(population) |> # makes the df into a tibble
  select(POP_2020,POP_2021,NAME) |> # picks just the POP_2020, POP_2021, NAME columns
  rename("state_name" = "NAME") |>
  rename("2020" = "POP_2020") |>
  rename("2021" = "POP_2021") |> # all the necessary renaming
  pivot_longer(cols=c("2020","2021"), # both 2020 and 2021 have populations in those columns
               names_to="Year", # that makes the data non-tidy. 
               values_to="Population") |> # the names of the columns are years; the values of the columns are populations
  mutate(Year=as.numeric(Year)) |>
  mutate(Population=as.numeric(Population)) |> # converting year and population into numerics
  mutate(Abbreviation=state.abb[match(state_name, state.name)]) |> # match(state_name, state.name) returns a vector of ids. first element of state_name is oklahoma; that's the 36th element in state.name, so first element of the match is 36. then state.abb and state.name are in the same order, so it works out
  mutate(Abbreviation=case_when( # sets Abbreviation to the right of ~ when the condition on the left holds
    state_name == "District of Columbia" ~ "DC", # when the state name is District of Columbia, set abbreviation to "DC"
    state_name == "Puerto Rico" ~ "PR",
    TRUE ~ Abbreviation # TRUE functions like else: when the state name is not District of Columbia or Puerto Rico, set abbreviation to itself 
  ))

#population <- population |> ## Use janitor row to names function (DONE)
  # convert to tibble (DONE)
  # remove state id column (DONE)
  # rename state column to state_name (DONE)
  # use pivot_longer to tidy (DONE)
  # remove POP_ from year (DONE)
  # parse all relevant columns to numeric (DONE)
  # add state abbreviations using state.abb variable (DONE)
  # use case_when to add abbreviations for DC and PR (DONE)
```

7. As a check, make a barplot of states' 2021 and 2022 populations. Show the state names in the y-axis ordered by population size.  Hint: You will need to use `reorder` and use `facet_wrap`.

```{r}
population |> 
  mutate(state_name=reorder(state_name,Population)) |>
  ggplot(aes(x=Population,y=state_name)) +
  geom_col() + 
  facet_wrap(~Year)
  # reorder state
  # assign aesthetic mapping
  # use geom_col to plot barplot
  # flip coordinates
  # facet by year
```


8. The following URL:

```{r}
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
```

points to a JSON file that lists the states in the 10 Public Health Service (PHS) defined by CDC. We want to add these regions to the `population` dataset. To facilitate this create a data frame called `regions` that has two columns `state_name`, `region`, `region_name`. One of the regions has a long name. Change it to something shorter.

```{r}
#| message: false
#| warning: false
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"

regions <- fromJSON(url)
# right now regions$region gives an ID, regions$region_name gives region name, and regions$states gives a list of states

# want it to look like
# state_name  region        region_name
# alabama     id            southeast
# alaska       other_id     pnw

# map_df first argument: the vector c(1,2,...,length(regions$region)). or 1:k where k is the number of regions
# map_df second argument: a function that returns a dataframe. note that map_df automatically binds all the outputs row-wise
# the dataframe has one column for state, which is all the states in region i
# it has one column for region_id, which is the region ids for those states (all the same)
# it has one column for region_name, which is the region names for those states

regions <- map_df(1:length(regions$region), function(i) {
  data.frame(
    state_name = regions$states[[i]],
    region = regions$region[[i]],
    region_name = regions$region_name[i]
  )
})

# now changing name of long region

regions <- regions |> mutate(region_name=case_when(
  region_name == "New York and New Jersey, Puerto Rico, Virgin Islands" ~ "Other",
  TRUE ~ region_name
))

# regions <- use jsonlit JSON parser 
# regions <- convert list to data frame. You can use map_df in purrr package 
```

9. Add a region and region name columns to the `population` data frame.

```{r}
population <- population |> 
  left_join(regions,by="state_name") # left join because we just want the states that are in population
# there are extra states in region
```

10. From reading <https://data.cdc.gov/> we learn the endpoint `https://data.cdc.gov/resource/pwn4-m3yp.json` provides state level data from SARS-COV2 cases. Use the **httr2** tools you have learned to download this into a data frame. Is all the data there? If not, comment on why.

```{r}
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
resp <- req_perform(request(api)) # request api, then get response
cases_raw <- resp_body_json(resp,simplifyDataFrame=TRUE) # set simplifyDataFrame=TRUE so we get a dataframe
```

We see exactly 1,000 rows. We should be seeing over $52 \times 3$ rows per state. (Weekly data across years.) 

11. The reason you see exactly 1,000 rows is because CDC has a default limit. You can change this limit by adding `$limit=10000000000` to the request. Rewrite the previous request to ensure that you receive all the data. Then wrangle the resulting data frame to produce a data frame with columns `state`, `date` (should be the end date) and `cases`. Make sure the cases are numeric and the dates are in `Date` ISO-8601 format.

```{r}
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
resp <- req_perform(request(paste0(api,"?$limit=10000000000"))) # request api, then get response
cases_raw <- resp_body_json(resp,simplifyDataFrame=TRUE) # set simplifyDataFrame=TRUE so we get a dataframe

cases <- cases_raw |> select(state,end_date,new_cases) |> # get just the columns we need
  rename("date" = "end_date") |>
  rename("cases" = "new_cases") |> # rename columns
  mutate(cases = as.numeric(cases)) |> # get numeric 
  mutate(date = as_date(ymd_hms(date))) # use ymd_hms to reduce it to just ymd, then as_date to get away from a datetime
```

12. For 2020 and 2021, make a time series plot of cases per 100,000 versus time for each state. Stratify the plot by region name. Make sure to label you graph appropriately. 

```{r}
cases |> 
  ggplot(aes(x=date,y=cases/100000)) +
  geom_line() +
  geom_point() +
  facet_wrap(~state)
```

13. The dates in the `cases` dataset are stored as character strings. Use the **lubridate** package to properly parse the `date` column, then create a summary table showing the total COVID-19 cases by month and year for 2020 and 2021. The table should have columns for year, month (as month name), and total cases across all states. Order by year and month. Use the **knitr** package and `kable()` function to display the results as a formatted table.

```{r}
#cases |> 
```

14. The following URL provides additional COVID-19 data from the CDC in JSON format:

```{r}
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
```

Use **httr2** to download COVID-19 death data from this endpoint. Make sure to remove the default limit to get all available data. Create a clean dataset called `deaths` with columns `state`, `date`, and `deaths` (renamed from the original column name). Ensure dates are in proper Date format and deaths are numeric.


```{r}
# Your code here
```

15. Using the `deaths` dataset you created, make a bar plot showing the total COVID-19 deaths by state. Show only the top 10 states with the highest death counts. Order the bars from highest to lowest and use appropriate labels and title.

```{r}
# Your code here
```